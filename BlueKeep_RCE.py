import socket
import argparse
from impacket.structure import Structure
from OpenSSL import SSL

""" This script uses ISO Transport Protocol to test basic RDP connectivity and attempt RCE through BlueKeep """
"""For ISO Transport Protocol Mechanisms see: https://tools.ietf.org/html/rfc892"""
# TODO code the basic RDP initialisation and termination packet sequences.

parser = argparse.ArgumentParser()
parser.add_argument('host', type=str, help='Specify the host target IP')
parser.add_argument('--proto_version', help='Specify the protocol version, defaults to 1',
                    action='store_true')
args = parser.parse_args()


class BasicPacketStructure(Structure):
    """ Define a basic TPKT packet structure with relevant headers """

    defaultHeader = (
        ('Version', 'B=3'),
        ('Reserved', 'B=0'),
        ('Length', '>H=len(TPDU)+4'),
        ('_TPDU', '_-TPDU', 'self["Length"]-4'),
        ('TPDU', ':=""'),
    )


class BasicDataUnitStructure(Structure):
    """Define a basic Transport Protocol Data Unit structure with relevant headers."""

    defaultHeader = (
        ('LengthIndicator', 'B=len(VariablePart)+1'),
        ('Code', 'B=0'),
        ('VariablePart', ':=""'),
    )


class BasicConnectionRequestPacketStructure(Structure):
    """Define a basic connection request structure with relevant headers"""

    defaultHeader = (
        ('DST-REF', '<H=0'),
        ('SRC-REF', '<H=0'),
        ('CLASS-OPTION', 'B=0'),
        ('Type', 'B=0'),
        ('Flags', 'B=0'),
        ('Length', '<H=8'),
    )


class BasicUserPayloadPacketStructure(Structure):
    """Define a a basic data unit with empty payload"""

    commonHdr = (
        ('EOT', 'B=0x80'),
        ('UserData', ':=""'),
    )

    def __init__(self, data=None):
        Structure.__init__(self, data)
        self['UserData'] = ''


class BasicInitialNegotiateRequest(BasicConnectionRequestPacketStructure):
    """Define a basic negotiate protocol version request packet structure"""

    structure = (
        ('requestedProtocols', '<L'),
    )

    def __init__(self, data=None):
        BasicConnectionRequestPacketStructure.__init__(self, data)
        if data is None:
            self['Type'] = 1


def init_rdp():
    None  # TODO transmit RDP connection initialisation request packet (a Class 0 X.224 Connection Request PDU)


def check_successful_rdp_init():
    None  # TODO check for a received Class 0 X.224 Connection Confirm PDU from the target server.


def send_rdp_settings_exchange_packet():
    None  # TODO Send an MCS Connect Initial PDU.
    # TODO Should contain a Generic Conference Control (GCC) Conference Create Request, this will allow for
    # TODO channel designation to get the Heap Exception


def check_for_settings_response_pdu():
    None  # TODO Check for a received MCS Connect Response PDU which contains a GCC Conference Create Response


def send_main_rdp_payload():
    None  # TODO Send the payload wrapped inside a X.224 Data Protocol Data Unit (PDU)


def init_test(ip):
    """Initial RDP Connection request test with SSL TLSv1"""
    """:returns tls connection value regardless of successfully established"""
    tpkt_packet = BasicPacketStructure()
    transport_data_unit = BasicDataUnitStructure()
    negotiate_req_packet = BasicInitialNegotiateRequest()
    negotiate_req_packet['Type'] = 1
    negotiate_req_packet['requestedProtocols'] = 1  # TODO if argparse option value or default 1
    transport_data_unit['Code'] = 0xe0  # Hex representation of 224.CR: https://tools.ietf.org/html/rfc892#section-8.1)
    tpkt_packet['TPDU'] = transport_data_unit.getData()
    soc = socket.socket()
    soc.connect((ip, 3389))
    soc.sendall(tpkt_packet.getData())
    soc.recv(8192)
    context = SSL.Context(SSL.TLSv1_METHOD)
    tls_connection = SSL.Connection(context, soc)
    tls_connection.set_connect_state()
    tls_connection.do_handshake()
    return tls_connection  # NONE if failed connection


if __name__ == '__main__':
    ip = args.host
    version = 1  # Default if optional proto_version argument value is not present

    if args.proto_version and type(args.proto_version) == int and args.proto_version != 1:
        version = args.proto_version

    try:

        tls_attempt = init_test(ip)
        print(tls_attempt.get_state_string())  # TODO Test to see if the state is connected.

    except Exception as e:

        print(e)

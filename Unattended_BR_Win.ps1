<#
PowerShell CIS Benchmark Build Review Script
@Author: Matt Robbins
#>

$version = "0.1"
Write-Host "`nPowerShell CIS Benchmark Build Review Script" -ForegroundColor "Cyan"
Write-Host "Author: Matthew Robbins" -ForegroundColor "Cyan"
Write-Host "Version: $version" -ForegroundColor "Cyan"

# Force execution stop on errors.
$ErrorActionPreference = "Stop"

# Initial setup and tests
Function Get-Current-Os-Version
{
    #Obtain the current OS Version, this helps later when determining CIS values for deprecated registry keys/values on some OS versions
    $currentOs = ''
    try
    {
        Write-Host "`n(*) Obtaining current Operating System Version ... " -ForegroundColor "Green"
        $currentOs = [Environment]::OSVersion.VersionString
        Write-Host "`t + Complete: Current OS Version: $currentOs `n" -ForegroundColor "Green"
        return $currentOs
    }
    catch [System.Exception]
    {
        Write-Host "`t - Failed: Unable to obtain the current OS version`n" -ForegroundColor "Red"
    }


}

Function Check-Elevation
{
    # Check that the script is being run as an Administrator
    Write-Host "`n(*) Checking run-time elevation ... " -ForegroundColor "Green"
    # Obtain the current user role which is used to run this script
    $whoamiOutput = whoami /all
    $isAdmin = $false
    # Check if the script is run with Administrator elevation.
    try
    {
        $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
        $isAdmin = $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)

        if($isAdmin -eq $false)
        {
            Write-Host "`t - Failed: Insufficient account elevation, please rerun the script using an Administrator account`n" -ForegroundColor "Red"
        }
        else
        {
            Write-Host "`t + Complete: Current elevation level appears to be Administrator`n" -ForegroundColor "Green"
        }

    }
    catch [System.Exception]
    {
        # Some sort of environment exception means that the script is either unable to discover the run-time elevation
        # used to execute it, OR the account used to run the script is not an administrator account
        # notify user, fatal exception - manual method may be required.
        Write-Host "`t - Failed: Unable to determine current elevation level`n" -ForegroundColor "Red"
    }
}

Function Check-Powershell-Version
{
    Write-Host "`n(*) Checking PowerShell version ... " -ForegroundColor "Green"
    # Try to obtain the environment's powershell version.
    $psVersion = ''
    try
    {
        $psInfo = Get-Host
        $psVersion = $psInfo.Version
        Write-Host "`t + Complete: PowerShell Version: $psVersion `n" -ForegroundColor "Green"

    }
    catch [System.Exception]
    {
        # More than likely policy constraints on running powershell commands
        Write-Host "`t - Failed: Unable to obtain the PowerShell version used on this environment`n" -ForegroundColor "Red"
    }
}

Function Create-Output-Files
{
    try
    {
        $currentDir = Get-Location
        Write-Host "`n(*) Creating Script Output Result files in current directory: $currentDir ..." -ForegroundColor "Green"
        # Create output files with the correct naming convention of IRM_BR_{datetime}.*
        $currentDateTime = Get-Date -Format "BR_ddMMyyyy_HH_mm"
        $filename = "IRM_" + $currentDateTime
        $fullFileName = $filename + ".txt"
        New-Item -Path . -Name $fullFileName -ItemType "file" -Value "IRM Build Review Tool Version $version" | Out-Null # .txt output.
        $fullFileName = $filename + ".xml"
        New-Item -Path . -Name $fullFileName -ItemType "file" -Value "IRM Build Review Tool Version $version" | Out-Null # .xml Output
        $fullFileName = $filename + ".xls"
        New-Item -Path . -Name $fullFileName -ItemType "file" -Value "IRM Build Review Tool Version $version" | Out-Null # .xls output.
        $fullFileName = $filename + ".csv"
        New-Item -Path . -Name $fullFileName -ItemType "file" -Value "IRM Build Review Tool Version $version" | Out-Null # .csv Output
        Write-Host "`t + Complete: .txt, .xml, .xls, .csv files created`n" -ForegroundColor "Green"
    }
    catch [System.IO.IOException]
    {
        Write-Host "`t - Failed: Unable to write files to current directory`n" -ForegroundColor "Red"
    }
}

Function Registry-Test-Access
{
    Write-Host "`n(*) Testing registry access at current elevation level ..." -ForegroundColor "Green"
    try
    {
        Get-ItemProperty -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion | Out-Null
        Write-Host "`t + Complete: Current policy settings allow registry access for this account`n" -ForegroundColor "Green"

    }
    catch [System.Exception]
    {
        Write-Host "`t - Failed: Current policy settings for this account appear to disallow registry access`n" -ForegroundColor "Red"
    }
}

Function Append-To-Xls
{
     # TODO ^^ https://social.technet.microsoft.com/Forums/scriptcenter/en-US/eb4f4d97-1c6e-41e5-830f-244b50bf722c/append-to-an-xml-file-with-powershell?forum=ITCG
}

Function Append-To-Csv
{

}

Function Append-To-Error-Dump
{
    # TODO
}

# CIS Benchmark checks

Function Check-Smb-versions
{
    $Smb1Client = $false
    $SmbServer = $false
    $Smb2 = $false
    #Check SMB1
    try
    {
       $Smb1 = Get-SmbServerConfiguration | Select EnableSMB1Protocol
       $Smb2 = Get-SmbServerConfiguration | Select EnabledSMB2Protocol
       if($Smb1)
       {
           # TODO
       }
       else
       {
           # TODO
       }
       if($Smb2)
       {
           # TODO
       }
       else
       {
           # TODO
       }
    }
    catch [System.Exception]
    {

    }
}

Function Check-Smb-Anonymous-Access {
    # TODO
}

Function Check-LLMNR-Nbt-Ns
{
    # TODO
}

Function Check-Anonymous-Access
{
    # TODO
}

Function Check-Password-Policy
{
    # TODO
}

Function Check-Ipv6-Config {
    # TODO
}

Function Check-Ipv4-Config {
    # TODO
}

Function Check-Build-No {
    # TODO
}
Function Web-Checks {
    # TODO
}

Function Check-Open-Ports-Services-Versions {
    # TODO
}
Function Check-Kerberos-Allowed-Algorithms
{
    # TODO
}

Function Check-For-Missing-Patches
{
    # TODO
}

Function Check-Rpc-Client-Auth {
    # TODO
}

# Begin Initial Setup and Tests
$currentOs = Get-Current-Os-Version
Check-Elevation
Check-Powershell-Version
Create-Output-Files
Registry-Test-Access
import re
import os
import argparse
import sys
from datetime import datetime
from shutil import copyfile

# TODO Separate vulnerabilities and advisories in issues, and separate categorically inside generated report.
# TODO Group relevant vulnerabilities per class.
# TODO eventually refactor.
# TODO Decide and assign severity-level for vulnerabilities and adjust overal statistics to provide relevant counts.
print(sys.version)
parser = argparse.ArgumentParser()
parser.add_argument('path_to_project', metavar='path_to_project', type=str, help='The absolute path to the C# project'
                                                                                 + ' to be analysed', nargs='?')
parser.add_argument('output_file_path', metavar='output_path', type=str, help='The absolute path for the output report'
                    , nargs='?')
args = parser.parse_args()
"""
    Better C# Static Analyser for Code Security
    Rather than just finding specific vulnerabilities, this also reports on various configuration and coding patterns 
    where typical issues arise so that the tester can then use this as a basis for a focused manual investigation.
     
Finished version will report on: 
        * Potential operation-based unchecked integer overflow issues.
        * Potential loop-based integer overflow issues.
        * Unrestricted class access.
        * Unrestricted code access privileges (lack of declaratives and imperatives for a class).
        * Potential credential leaks in comments.
        * No Platform Invoke String Marshalling.
        * Inadequate unmanaged method access modifier issues for Platform Invoked methods.
        * Leaked credentials in comments.
        * Hard-coded passwords and hashes in code.
        * Input sanitisation issues.
        * Weak encryption issues. # NOT FINISHED
        # Project configuration vulnerability issues. # NOT FINISHED


   _____ _               _     _____          _        _____  _  _    
  / ____| |             | |   / ____|        | |      / ____|| || |_  
 | |    | |__   ___  ___| | _| |     ___   __| | ___ | |   |_  __  _| 
 | |    | '_ \ / _ \/ __| |/ / |    / _ \ / _` |/ _ \| |    _| || |_  
 | |____| | | |  __/ (__|   <| |___| (_) | (_| |  __/| |___|_  __  _| 
  \_____|_| |_|\___|\___|_|\_\\_____\___/ \__,_|\___| \_____ ||_||_|   
        
        CheckCode C# Static Security Code Auditor for C# Projects
"""

full_issues = []
comment_issues = []
USER_INPUT_OBJECT_CONTROL_PATTERNS = [
    'TextBox', 'PasswordBox', 'RichEditBox', 'AutoSuggestBox', 'MaskedTextBox',
    'MessageBox', 'CheckBox', 'ComboBox', 'ListBox', 'SearchBox', 'Console.ReadLine()'
]

CREDENTIAL_USAGE_PATTERNS = []

SANITISATION_NAMESPACE_PATTERNS = ['Sanitize', 'SqlCommand', 'Remove', 'IsMatch', 'Regex', 'CssEncode',
                                   'HeaderNameValueEncode', 'HtmlAttributeEncode', 'HtmlDecode', 'HtmlEncode',
                                   'HtmlFormUrlEncode', 'JavaScriptStringEncode', 'MarkAsSafe', 'UrlEncode',
                                   'UrlPathEncode', 'XmlAttributeEncode', 'XmlEncode']

WEB_FORM_INPUT_PATTERNS = ['<input', '<textarea', '<form', '<select', '<button']

HTTP_REQUEST_NAMESPACE_PATTERNS = ['WebRequest.Create', 'GetResponse', 'GetResponseStream', 'RequestUri',
                                   'DefaultRequestHeaders', 'GetAsync', 'BaseAddress', 'GetByteArrayAsync',
                                   'GetStreamAsync', 'PostAsync', 'PutAsync', 'SendAsync', 'CopyToAsync']

EXTERNAL_RESOURCE_PATTERNS = ['ResXFileRef', 'ResXResourceReader', 'ResXResourceSet', 'ResXResourceWriter',
                              'IResourceReader', 'IResourceWriter']

ENCRYPTION_OPERATION_PATTERNS = ['EncryptStringToBytes_Aes', 'DecryptStringFromBytes_Aes',
                                 'Aes', 'AesCng', 'CreateDecryptor', 'CreateEncryptor',
                                 'GenerateIV', 'GenerateKey', 'GetHashCode', 'ValidKeySize',
                                 'EncryptData', 'SymmetricAlgorithm', 'AesManaged',
                                 'CngAlgorithm', 'ECDiffieHellman', 'ECDiffieHellmanP256',
                                 'ECDiffieHellmanP384', 'ECDiffieHellmanP521', 'ECDsa', 'ECDsaP256',
                                 'ECDsaP384', 'ECDsaP521', 'MD5', 'Rsa', 'Sha1', 'Sha256', 'Sha384',
                                 'Sha512', 'CngAlgorithmGroup', 'DiffieHellman', 'Dsa', 'KeySize',
                                 'KeyUsage', 'EccFullPrivateBlob', 'EccFullPublicBlob', 'EccPrivateBlob',
                                 'EccPublicBlob', 'GenericPrivateBlob', 'GenericPublicBlob',
                                 'OpaqueTransportBlob', 'Pkcs8PrivateBlob', 'CngKeyCreationParameters',
                                 'ExportPolicy', 'KeyCreationOptions', 'CngPropertyCollection',
                                 'KeyHandle', 'AddAlgorithm', 'MapNameToOID', 'CryptographicAttributeObjectEnumerator',
                                 'CryptographicAttributeObjectCollection', 'CryptographicException',
                                 'CryptographicUnexpectedOperationException', 'CryptoStream', 'CspKeyContainerInfo',
                                 'DataProtector', 'DES', 'DESCryptoServiceProvider', 'LegalKeySizesValue',
                                 'LegalBlockSizesValue', 'IVValue', 'IV', 'Key', 'KeySize' 'IsSemiWeakKey',
                                 'IsWeakKey'
                                 ]
file_statistics = []
issue_count = 0
print("  _____ _               _     _____          _        _____  _  _  ")
print(" / ____| |             | |   / ____|        | |      / ____|| || |_")
print("| |    | |__   ___  ___| | _| |     ___   __| | ___ | |   |_  __  _| ")
print("| |    | '_ \ / _ \/ __| |/ / |    / _ \ / _` |/ _ \| |    _| || |_  ")
print("| |____| | | |  __/ (__|   <| |___| (_) | (_| |  __/| |___|_  __  _| ")
print(" \_____|_| |_|\___|\___|_|\_\\_____\___/ \__,_|\___| \_____ ||_||_|  ")
print("CheckCode_C# Static Security Code Auditor for C# Projects")

if len(sys.argv) < 3:
    parser.print_help()
    parser.print_usage()
    quit()


def get_file_arr(project_path):
    """
    :param project_path: path to the c# project
    """
    file_arr = list()
    for (path, dir_names, file_names) in os.walk(project_path):
        file_arr += [os.path.join(path, file) for file in file_names]
    return file_arr


def get_file_contents_for_sources(project_path, suffix):
    """
    :param project_path: path to the c# project
    :param suffix: file suffixes to get contents for
    :return: multidimensional array of lines for each file
    """
    contents_array = []
    # Iterate through files and sub directories in path to get .cs file array list.
    for listing in get_file_arr(project_path):
        test_listing = listing.split('.')
        print(test_listing[len(test_listing) - 1])
        # and not '.csproj' in listing and not '.css' in listing and not '.cshtml' in listing
        if test_listing[len(test_listing) - 1] == 'cs':

            # Get file contents and store to content array (single index per file)
            with open(listing, 'r') as file:
                lines = file.readlines()
                file.close()
                contents_array.append((listing, lines))
                file.close()
        if '.csproj' in listing:
            # TODO add some checks for these type of files and information they typically contain.
            pass
        # TODO add additional checks for other C#/ .NET project file types.

    return contents_array


def class_name_extractor(class_name):
    """
    :param class_name: String, raw class declaration line
    :return: String, trimmed class-name
    """
    trimmed_name = class_name
    if trimmed_name.__contains__('public'):
        trimmed_name = class_name.replace('public', '')
    elif trimmed_name.__contains__('private'):
        trimmed_name = trimmed_name.replace('private', '')
    trimmed_name = trimmed_name.replace('class', '')
    trimmed_name = trimmed_name.replace('{', '')
    trimmed_name = trimmed_name.strip()
    return trimmed_name


def check_classes(file_path, file_contents):
    """
       :param file_path: full path string as identifier for current file contents array
       :param file_contents: array of lines contained in a given file
    """
    class_count_for_file = 0
    has_declarative_imperative = False
    web_html_input_elements_exist = False
    issues_for_class = []
    current_class_name = ''
    global issue_count
    print("\n Analysing file: " + file_path + " ...\n")
    index = 0
    for current_line in file_contents:
        if current_line.startswith('using') or current_line.startswith('namespace'):
            continue
        if 'class' in current_line:
            class_count_for_file = class_count_for_file + 1
            current_class_name = class_name_extractor(current_line)
        if index > 0:
            # Make sure comments are searched for any potential cred leaks etc.
            if '/*' in current_line:
                ind = index
                while ind < (file_contents.__len__() - 1) and '*/' not in file_contents[ind]:
                    # Store suspicious comments for analysis too, might contain passwords or other cred info.
                    if 'password' not in current_line or 'credentials' not in current_line or 'username' not in \
                            current_line or 'pass' not in current_line or 'creds' not in current_line \
                            or 'token' not in current_line or 'hash' not in current_line or 'user' not in current_line:
                        if '*/' in current_line:
                            pass
                    if 'password' in current_line or 'credentials' in current_line or 'username' in current_line or \
                            'pass' in current_line or 'creds' in current_line or 'token' in current_line \
                            or 'hash' in current_line or 'user' in current_line:
                        current_line = current_line.strip()
                        if ("Potential credential leak in comment <span style='color:red;'>"
                            + current_line.rstrip('\n')
                            + "</span> on line: <span style='color:red;'>" + str(ind)
                            + '</span>') not in comment_issues:
                            comment_issues.append("Potential credential leak in comment <span style='color:red;'>"
                                                  + current_line.rstrip('\n')
                                                  + "</span> on line: <span style='color:red;'>" + str(ind) + '</span>')

                            issue_count = issue_count + 1
                    ind = ind + 1
        if 'class' in current_line:
            if 'public' in current_line:
                formatted_line = current_line.replace('{', '')
                issues_for_class.append(
                    "Unrestricted access to class found: <span style='color: red;'>"
                    + formatted_line.rstrip('\n') + "</span> on line: <span style='color: red;'>" + str(index + 1)
                    + '</span>')
                issue_count = issue_count + 1

            current_class_name = class_name_extractor(current_line)
            if '[' in file_contents[index - 1]:
                if 'Permission' in file_contents[index - 1] or 'permission' in file_contents[index - 1]:
                    has_declarative_imperative = True
                declarative = file_contents[index - 1]
                if 'Unrestricted=true' in declarative:
                    declarative = declarative.strip()
                    issues_for_class.append("Unrestricted code access security policy declarative discovered ("
                                            + declarative.rstrip('\n') + ") for class: " + current_class_name
                                            + " on line: " + str(index))
                    issue_count = issue_count + 1
            """ Search for TextBox, PasswordBox, RichEditBox, AutoSuggestBox,
              MessageBox, CheckBox, ComboBox, ListBox, SearchBox, Console.ReadLine() type objects and check for
              sanitisation/ validation. """
        for input_control_pattern in USER_INPUT_OBJECT_CONTROL_PATTERNS:
            separated_lines = current_line.split()
            for single_line in separated_lines:
                if input_control_pattern in single_line and input_control_pattern != single_line:
                    # This means there is a custom input object from an extended class
                    USER_INPUT_OBJECT_CONTROL_PATTERNS.append(single_line)
            # Ensure line doesn't contain 'class' because we want the object declarations and assignments, not
            # the actual custom class declaration.
            if current_line.__contains__(input_control_pattern) and 'class' not in current_line:
                # Pattern match for control variable name operations, to search for usages
                #   throughout current class/file.
                splitted_lines = current_line.split()
                for s_line in splitted_lines:
                    if input_control_pattern == s_line and '=' in current_line:
                        if ("User input \"" + input_control_pattern + "\" control object assignment operation found " +
                            "for class:" + current_class_name + " on line: <span style='color:red;'>"
                                + str(index + 1) + '</span>') not in issues_for_class:
                            issues_for_class.append("User input \"" + input_control_pattern
                                                    + "\" control object assignment operation found " +
                                                    "for class:<span style='color: red;'>" + current_class_name
                                                    + "</span> on line: <span style='color:red;'>" + str(index + 1)
                                                    + '</span>')
                            issue_count = issue_count + 1
        # Check for web forms.
        if '<form' in current_line:
            # TODO check for sanitisation and report accordingly to issues_for_class list.
            web_html_input_elements_exist = True  # Assigned for use with http request issue logic
            if 'action' in current_line:
                s_lines = current_line.split(' ')
                for s_line in s_lines:
                    if s_line.find("id=") > -1:
                        id_vals = s_line.split('"')
                        # The value of the forms specific id attribute, needed for finding referencing in C# code-base
                        id_val = id_vals[1]
                        for line in file_contents:
                            # Find the storage variable value assignment operation.
                            if '=' in line and id_val in line and 'Request.Form' in line:
                                req_str = line.strip()
                                req_str = req_str.split(' ')
                                req_str = req_str[1]  # Storage variable name
                                # Check for sanitisation or regex operations on variable.
                                sanitized = False
                                for l in file_contents:
                                    for san_pattern in SANITISATION_NAMESPACE_PATTERNS:

                                        if l.find(san_pattern) > -1 and l.find(req_str) > -1:
                                            sanitized = True

                                if sanitized is True:
                                    # TODO add to issue for further interrogation of sanitisation techniques.
                                    issues_for_class.append(('Data from user-submitted form, in variable: '
                                                            + '<span style="color:red;">' + req_str
                                                            + '</span> appears to be sanitised however, but might not '
                                                            + 'be exhaustively santized/valatidated. on line: '
                                                            + '<span style="color:red;">'
                                                            + str(index) + '</span>'))
                                    pass
                                elif sanitized is False:
                                    # Add to issues
                                    if len(req_str) > 1:
                                        issues_for_class.append(('Data from user-submitted form, in variable: '
                                                                + '<span style="color:red;">' + req_str
                                                                + '</span> does not appear to be sanitized or '
                                                                + 'validated.'
                                                                + 'on line: <span style="color:red;">'
                                                                + str(file_contents.index(line)) + '</span>'))

        # Check for http request namespace operations
        for request_pattern in HTTP_REQUEST_NAMESPACE_PATTERNS:
            sep_lines = current_line.split()
            for sep_line in sep_lines:
                if web_html_input_elements_exist is True:
                    # TODO add to issues_for_class list -
                    #  html elements and html request methods exist, check sanitisation etc.
                    pass
        # Check for operation-based overflow
        if '//' not in current_line.strip() and '*.' not in current_line.strip() and '++' not in current_line.strip() \
                and '/*' not in current_line.strip() and '*/' not in current_line.strip():
            if current_line.strip().__contains__('*') or current_line.strip().__contains__('+') \
                    and '+=' not in current_line.strip():
                if current_line.__contains__('checked('):
                    # DO NOTHING, operation is checked.
                    pass
                else:
                    # Operation is not checked, potential for operation-based overflow increases
                    # Check assignee variable type
                    assignee_var = current_line.split('=')[0]
                    if assignee_var.__contains__('.'):
                        # No need to search further as object property is an integer, so operation_base integer overflow
                        # possibility.
                        pass
                    else:
                        # Search for other uses of the variable to find it's implicit or explicit type
                        for l in file_contents:
                            if l.find('var ') > -1 or l.find('int ') > -1:
                                if l.find(assignee_var.strip()) > -1:
                                    var_type = l.split(assignee_var)
                                    var_type = var_type[0]
                                    output_assignee_var = var_type.split()
                                    if var_type.__contains__('var'):
                                        issues_for_class.append(
                                            "Potential operation-based overflow issue "
                                            + 'where the operation result for <span style="color: red;">\"'
                                            + current_line.strip()
                                            + '\"</span> is placed into the <i>implicitly typed</i>'
                                            + ' variable assignee: \"' + output_assignee_var[1]
                                            + '\" and doesn\'t appear to be checked.'
                                            + ' at line: <span style="color: red;">' + str(index + 1) + '</span>')
                                    elif var_type.__contains__('int'):
                                        issues_for_class.append(
                                            "Potential operation-based overflow issue "
                                            + 'where the operation result <span style="color: red;">\"'
                                            + current_line.strip()
                                            + '\"</span> is placed into the <i>explicitly typed</i>'
                                            + ' variable assignee: \"' + output_assignee_var[1]
                                            + '\" and doesn\'t appear to be checked.'
                                            + ' at line: <span style="color: red;">' + str(index + 1) + '</span>')

        # Check for iteration-based overflow
        if current_line.strip().startswith('for(') or current_line.strip().startswith('for ('):
            implictly_typed_count_var = False
            explicitly_typed_count_var = False
            if current_line.endswith('{'):
                iteration_variables = re.search(r'\((.*?)\{', current_line).group(1)
            else:
                testline = current_line.strip()
                last_char_in_for_line = testline[(len(testline) - 1)]
                iteration_variables = testline[testline.find('('):(len(testline) - 1)]
            if len(iteration_variables) > 1:
                if iteration_variables.find('var ') > -1:
                    implictly_typed_count_var = True
                else:
                    explicitly_typed_count_var = True
                iteration_variables = iteration_variables.replace('{', '')
                iteration_variables = iteration_variables.split(';')

                iteration_variables[0] = iteration_variables[0].replace('(', '')
                iteration_variables[(len(iteration_variables) -1)] = iteration_variables[(len(iteration_variables) -1)].replace(')', '')
                threshold_var = ''
            if '<' in iteration_variables[1]:
                threshold_var = iteration_variables[1].split('<', 1)[-1]
            if 'not' in iteration_variables[1]:
                threshold_var = iteration_variables[1].split('not', 1)[-1]
            if threshold_var is not '' and threshold_var.find('Length') == -1 and threshold_var.find('Count') == -1:
                checked_var = False
                for line in file_contents:
                    if line.__contains__(threshold_var) and 'for(' not in line and 'for (' not in line:
                        checked_var = True
                if not checked_var:
                    # Threshold variable size check not found, likely hood of overflow issue increased, report
                    if implictly_typed_count_var is True:
                        formatted_line = current_line.replace('{', '')
                        if ("Potential loop-based overflow issue in: <span style='color: red;'>"
                            + formatted_line.strip()
                            + '</span> where the <i>implicitly typed</i> variable size qualifier: '
                            + '<span style="color: red;">\"' + threshold_var
                            + '\"</span> doesn\'t appear to be checked.'
                            + ' at line: <span style="color:red;">' + str(index + 1)
                            + '</span>') not in issues_for_class:
                            issues_for_class.append(
                                "Potential loop-based overflow issue in: <span style='color: red;'>"
                                + formatted_line.strip()
                                + '</span> where the <i>implicitly typed</i> variable size qualifier: '
                                + '<span style="color:red;>\"' + threshold_var
                                + '\"</span> doesn\'t appear to be checked.'
                                + ' at line: <span style="color:red;">' + str(index + 1)
                                + '</span>')
                            issue_count = issue_count + 1
                    elif explicitly_typed_count_var is True:
                        formatted_line = current_line.replace('{', '')
                        if ("Potential loop-based overflow issue in: <span style='color: red;'>"
                            + formatted_line.strip()
                            + '</span> where the <i>explicitly typed</i> variable size qualifier: '
                            + '<span style="color: red;">\"' + threshold_var
                            + '\"</span> doesn\'t appear to be checked.'
                            + ' at line: <span style="color:red;">' + str(index + 1)
                                + '</span>') not in issues_for_class:
                            issues_for_class.append(
                                "Potential loop-based overflow issue in: <span style='color: red;'>"
                                + formatted_line.strip()
                                + '</span> where the <i>explicitly typed</i> variable size qualifier: '
                                + '<span style="color: red;">\"' + threshold_var
                                + '\"</span> doesn\'t appear to be checked.'
                                + ' at line: <span style="color:red;">' + str(index + 1) + '</span>')
                            issue_count = issue_count + 1
        split_l = current_line.split()
        # Check for encryption operations
        for pattern in ENCRYPTION_OPERATION_PATTERNS:
            # current_line split by whitespace delimiter
            for l in split_l:
                if l.__contains__(pattern):
                    # TODO encryption checks
                    pass
        # Check for external resource loading and processing
        for ext_res_pattern in EXTERNAL_RESOURCE_PATTERNS:
            for l in split_l:
                if l.__contains__(ext_res_pattern):
                    # TODO report accordingly to issues_for_class list.
                    pass

        # Check for Platform Invoke and unmanaged methods.
        if current_line.find('DllImport') > -1:
            unmanaged_method_call = file_contents[file_contents.index(current_line) + 1]
            if unmanaged_method_call.find('public') or unmanaged_method_call.find('protected'):
                if unmanaged_method_call.find('{'):
                    unmanaged_method_call = unmanaged_method_call.replace('{', '')
                # Report P/Invoke issue.
                issues_for_class.append(("Unmanaged library .dll platform invoke method is not "
                                         + "sufficiently protected : "
                                         + '<span style="color: red;">' + unmanaged_method_call + '</span> on line: '
                                         + '<span style="color: red;">' + str(index + 2) + '</span>'))
            if current_line.find('Charset.Unicode') == -1:
                # No marshalling detected for P/Invoke declaration, add to report.
                issues_for_class.append(("The platform invoke declaration does not marshall the data retrieved: "
                                         + '<span style="color: red;">'
                                         + current_line
                                         + "</span> on line: <span style='color: red;'>" + (str(index + 1) + '</span>')
                                         ))
        if current_line.find('password') > -1 or current_line.find('pass') > -1 or current_line.find('hash') > -1 \
                or current_line.find('pw ') > -1:
            if current_line.find('=') > -1 and current_line.find('"') and current_line.find('";'):
                # Report on potential password leak in variable.
                issues_for_class.append(("Potential hard-coded password or hash found: "
                                         + "<span style='color:red;'>" + current_line.strip())
                                        + '</span> on line: <span style="color:red;">' + str(index + 1)
                                        + '</span>')

        # Check if current line contains leading whitespace - that way we can be really sure the current_line is still
        # part of the class.
        if re.match(r'\s', current_line):
            if 'Permission' in current_line:
                if 'Unrestricted' in current_line:
                    current_line = current_line.strip()
                    issues_for_class.append(("Unrestricted code access policy imperative discovered "
                                             + '<span style="color: red;">'
                                             + current_line.rstrip('\n')
                                             + '</span>'
                                             + " for class: <span style='color: red;'>" + current_class_name
                                             + "</span> on line: <span style='color: red;'" + str(index + 1))
                                            + '</span>')
                    issue_count = issue_count + 1
                    has_declarative_imperative = True
        # Find end bracket for class, has no leading white space since classes are not indented.
        if not re.match(r'\s', current_line) and '}' in current_line:
            if ("Class <span style='color: red;'>" + current_class_name
                + "</span> does not appear to have any declarative"
                + " or imperative permissions - unrestricted code-access permissions"
                + " apply for this class.") \
                    not in issues_for_class and has_declarative_imperative is False:
                issues_for_class.append(("Class <span style='color: red;'>" + current_class_name
                                         + "</span> does not appear to have any declarative"
                                         + " or imperative permissions - unrestricted code-access permissions"
                                         + " apply for this class."))
                issue_count = issue_count + 1
        if current_class_name is '':
            class_index = file_contents.index(current_line)
            if class_index == 0:
                class_index = class_index + 1
            class_line = file_contents[class_index]
            current_class_name = class_name_extractor(class_line)
            has_declarative_imperative = False
        index = index + 1
    full_issues.append([file_path, issues_for_class, comment_issues])
    file_statistics.append([file_path, class_count_for_file])


content = get_file_contents_for_sources(args.path_to_project, '.cs')
for file_instance in content:
    check_classes(file_instance[0], file_instance[1])
for full_issue in full_issues:
    # print('\n' + full_issue[0])
    pass
    for issue_item in full_issue[1]:
        # print('\t' + issue_item)
        pass
    for comment_issue in full_issue[2]:
        # print('\t' + comment_issue)
        pass


def store_output_in_file(f_issues):
    """
    :param f_issues: Multidimensional List of issues per file in project.
    """
    dat = str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
    dat1 = dat.replace(':', '_')
    filename = args.output_file_path + '/Analysis_Output_' + dat1 + '.html'
    filename = filename.replace(' ', '_')
    f = open(filename, 'a')
    file_count = len(file_statistics)
    script_base_dir = os.path.dirname(os.path.realpath(__file__)) + '/lg.png'
    lg_out = args.output_file_path + '/lg.png'
    try:
        p = open(lg_out)  # logo was already written
    except:
        copyfile(script_base_dir, lg_out)

    f.write('<!DOCTYPE html><html><head><title>Static Analysis Results</title></head>'
            + '<style>body, body * { font-family: "Lucida Sans Unicode", "Lucida Grande", sans-serif  }</style>'
            + '<body style="margin:0px;font-family: '
            + '"Lucida Sans Unicode";"><style>li {padding: 5px;}</style>'
            + '<div style="background-color:rgba(0,100,230,0.3); display: flex; margin:0; flex-direction: row;"><logo>'
            + '<img src="lg.png" style="height: 200px; width: auto;" /></logo>'
            + '<h4 style="margin-left:auto; margin-right:10px; padding: 5px; font-weight:100; '
            + 'background: rgba(0,150,0,0.0);">'
            + '<p>Scan results for scan: ' + dat + '</p>'
            + '<p>Total issues for review found: ' + str(issue_count) + '</p>'
            + '<p>Total Files analysed: ' + str(file_count))
    f.write('</h4></div><div style="padding-top: 20px; padding-bottom: 20px; padding-left: 20px; margin: 5%;'
            + 'width: auto; height: auto; background-color: rgba(200,200,200,0.5);">')
    for issue in f_issues:
        f.write('<h2 style="color:green; font-weight=100;">\n' + issue[0] + '</h2>\n')
        if len(issue[1]) < 1:
            pass
        else:
            for iss_item in issue[1]:
                if 'platform' in iss_item and 'invoke' in iss_item and 'protected' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue;font-weight: 100;margin-top: 40px;'
                            + 'font-size:16px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px; margin-left: 30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + 'Methods marked with the System.Runtime.InteropServices.DllImportAttribute '
                            + 'attribute use Platform Invocation Services to access unmanaged code and '
                            + 'should not be exposed. Keeping them private or internal makes sure '
                            + 'that their access is controlled and properly managed.'
                            + '</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Ensure that the method definition is declared private or internal.'
                            + '</h4>'
                            + '</blockquote>\n'
                            )
                if 'appears to be sanitised however' in iss_item:
                    # todo
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100; font-size: '
                            + '16px; margin-top: 40px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px; margin-left: 30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + ''
                            + '</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + '</h4></blockquote>\n')
                    pass
                if 'does not appear to be sanitized' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100; font-size: '
                            + '16px; margin-top: 40px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px; margin-left: 30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + 'Untrusted input values that originate from web forms could contain special characters '
                            + 'that allow for malicious instructions to be injected via the frontend and subsequently'
                            + ' executed by the backend such as injecting values into a database via SQL injection, '
                            + 'XSS, or command injection.'
                            + '</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Ensure that all user inputs are sanitized once obtained and stored inside a variable.'
                            + ' There are multiple methods of sanitization within C# code such as: using external '
                            + 'open-source classes like HtmlSanitizer, using Regexes for pattern matching and '
                            + 'Microsoft\'s AntiXSSEncoder class to name a few. Ensure that patterns to blacklist and'
                            + ' also whitelist are stringent enough to secure against all injection payloads '
                            + 'including detecting methods of obfuscation such as: \"svg onload=alert(1)\" '
                            + 'for XSS or '
                            + 'Invalid Percent Encoding with SQLi: \"%UNI%ON %SE%LE%CT 1 %FR%OM %D%U%A%L\".</h4>'
                            + '</blockquote>\n')
                if 'platform' in iss_item and 'invoke' in iss_item and 'marshall' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100; font-size: '
                            + '16px; margin-top: 40px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px; margin-left: 30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + 'When you convert from Unicode to ANSI, it is possible that not all Unicode '
                            + 'characters can be represented in a specific ANSI code page. Best-fit mapping '
                            + 'tries to solve this problem by substituting a character for the character that '
                            + 'cannot be represented. The use of this feature can cause a potential security '
                            + 'vulnerability because you cannot control the character that is chosen. '
                            + 'For example, malicious code could intentionally create a Unicode string that '
                            + 'contains characters that are not found in a particular code page, which are '
                            + 'converted to file system special characters such as ".." or "/". '
                            + 'Note also that security checks for special characters frequently occur '
                            + 'before the string is converted to ANSI. Best-fit mapping is the default for '
                            + 'the unmanaged conversion, WChar to MByte. Unless you explicitly '
                            + 'disable best-fit mapping, your code might contain an exploitable '
                            + 'security vulnerability because of this issue.'
                            + '</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Explicitly marshal string data types by using Charset.Unicode only rather than either'
                            + 'complete absence of the Charset argument or Charset.Auto.'
                            + '</h4>'
                            + '</blockquote>\n')

                if 'Potential' in iss_item and 'overflow' in iss_item and 'operation' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100;margin-top: 40px; '
                            + 'font-size: 16px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px; margin-left: 30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + 'Operation-based overflows occur when the result of an operation, '
                            + 'such as multiplication or addition, exceeds the maximum'
                            + ' size of the data type used to store it.</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Verify whether the operation result '
                            + ' is type-validated sufficiently to ensure that the assignee variable is not at'
                            + ' risk of exceeding the size limit for it\'s current type.'
                            + '</h4>'
                            + '</blockquote>\n')
                if 'hard-coded password or hash' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100;margin-top: 40px; '
                            + 'font-size: 16px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px; margin-left: 30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + 'Hard-coded credentials should never be stored statically inside code, this makes '
                            + 'it trivial for a malicious actor to gain a foothold on underlying systems or resources.'
                            + '</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Verify that the highlighted code does contain a password or hash.'
                            + '</h4>'
                            + '</blockquote>\n')
                if 'Potential' in iss_item and 'overflow' in iss_item and 'loop' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100;margin-top: 40px;'
                            + 'font-size: 16px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px; margin-left:30px;">Issue Description: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + ' Iteration-based overflows occur when the result of an iteration, '
                            + 'such as with incremented to a specified value, exceeds the maximum'
                            + ' size of the data type used to store it. </h4>'
                            + '<span style="font-size: 16px;margin-left:40px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Verify whether the loop qualifier result '
                            + ' is size-constrained sufficiently to ensure that the assignee/iteration variable is '
                            + 'not at'
                            + ' risk of exceeding the size limit for it\'s current type.'
                            + '</h4>'
                            + '</blockquote>\n')

                if 'Unrestricted access to class found' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100;margin-top: 40px;'
                            + 'font-size: 16px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px;margin-left:30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + ' Using the correct access modifiers helps prevent illicit access through '
                            + 'direct reference and also, with a runtime security check, even when '
                            + 'accessed through reflection.'
                            + '</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Determine if the class contains sensitive operations within its members, '
                            + 'and test if illicit'
                            + ' access can be achieved to gain sensitive information that could be used to facilitate a'
                            + ' further attack vector. Such as obtaining or changing credentials,'
                            + ' tokens and encryption strengths by directly referencing member variables or'
                            + ' methods within this class.</h4>'
                            + '</blockquote>\n')
                if 'does not appear to have any declarative' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100;margin-top: 40px;'
                            + 'font-size:16px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px;margin-left:30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + 'Code access security helps limit the access that code has to protected resources'
                            + ' and operations. In the .NET Framework, code access security performs the '
                            + 'following functions: <ul>'
                            + '<li> Defines permissions and permission sets that represent the right to access various '
                            + 'system resources.</li>'
                            + '<li>Enables code to demand that its callers have specific permissions.</li>'
                            + '<li>Enables code to demand that its callers possess a digital signature, thus allowing'
                            + ' only callers from a particular organization or site to call the protected code.</li>'
                            + '<li>Enforces restrictions on code at run time by comparing the granted permissions of '
                            + 'every caller on the call stack to the permissions that callers must have.</li></ul>'
                            + '</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Check that the reported classes do not contain dangerous functionality '
                            + 'within its member '
                            + 'methods such as that needs resource'
                            + ' access or write permission to be constrained.'
                            + '</h4>'
                            + '</blockquote>\n')
                if 'control object assignment operation' in iss_item:
                    f.write('<blockquote>\r\t<h3 style="color:blue; font-weight: 100;margin-top: 40px;'
                            + 'font-size:16px;">' + iss_item
                            + '</h3>'
                            + '<span style="font-size: 16px;margin-left:30px;">Issue Description:</span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,100,230,0.3); margin-left:50px;">'
                            + ' Input sanitisation and validation for user-supplied input values is vital to securing '
                            + 'the application, if special characters that could represent a script or command are not '
                            + 'removed, then the likely hood that the application is at direct risk of '
                            + 'injection attacks increases.'
                            + '</h4>'
                            + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                            + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                            + 'rgba(0,230,100,0.3); margin-left:50px;">'
                            + 'Check if the reported control object is subject to sanitisation steps such as '
                            + 'Regex.Replace() pattern matching to remove any special characters that '
                            + 'could represent a '
                            + 'string breakout attempt.'
                            + '</h4>'
                            + '</blockquote>\n')
        if len(issue[2]) < 1:
            if len(issue[1]) < 1:
                f.write('<blockquote>\r\t<h3 style="color:green; font-weight: 100; margin-top:4px;">'
                        + 'No issues found for this class.</h3></blockquote>')
        else:
            for c_item in issue[2]:
                f.write('\r\t<blockquote><h3 style="color:blue; font-weight: 100; margin-top: 40px;'
                        + 'font-size:16px;">' + c_item
                        + '</h3>'
                        + '<span style="font-size: 16px;margin-left:30px;">Issue Description: </span>'
                        + '<h4 style="font-size:14px; font-weight: 100; padding: 40px; background-color: '
                        + 'rgba(0,100,230,0.3);'
                        + ' margin-left:50px;">'
                        + ' Sometimes during the development process, things either get commented '
                        + 'out rather than deleted '
                        + 'in addition to credentials and other sensitive information being left inside comments.'
                        + '</h4>'
                        + '<span style="font-size: 16px;margin-left:30px;">Verification Steps: </span>'
                        + '<h4 style="font-size:14px; font-weight:100; padding: 40px; background-color: '
                        + 'rgba(0,230,100,0.3); margin-left:50px;">'
                        + 'Carefully check any comments reported to have sensitive information and ensure that '
                        + 'they do not contain any passwords, hashes, tokens for user information.'
                        + '</h4></blockquote>\n')
    f.write('</div></body></html>')
    f.close()
    print("\nTest output stored in: " + filename)


store_output_in_file(full_issues)
